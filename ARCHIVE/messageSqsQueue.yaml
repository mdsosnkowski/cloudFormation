AWSTemplateFormatVersion: "2010-09-09"
Resources:
  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue

  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OrderTable
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  OrderProcessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderProcessingLambda
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref OrderQueue
          DYNAMODB_TABLE: !Ref OrderTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          sqs = boto3.client("sqs")
          dynamodb = boto3.resource("dynamodb")
          table = dynamodb.Table(os.environ["DYNAMODB_TABLE"])
          queue_url = os.environ["SQS_QUEUE_URL"]

          def lambda_handler(event, context):
              messages = sqs.receive_message(
                  QueueUrl=queue_url,
                  MaxNumberOfMessages=10,
                  WaitTimeSeconds=10
              )

              if "Messages" in messages:
                  for message in messages["Messages"]:
                      order = json.loads(message["Body"])
                      print(f"Processing order: {order}")

                      # Store the order in DynamoDB
                      table.put_item(Item=order)

                      # Delete the message after processing
                      sqs.delete_message(
                          QueueUrl=queue_url,
                          ReceiptHandle=message["ReceiptHandle"]
                      )

              return {"statusCode": 200, "body": "Orders processed"}

  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      EventSourceArn: !GetAtt OrderQueue.Arn
      FunctionName: !Ref OrderProcessingLambda

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaSQSPermissionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt OrderQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt OrderTable.Arn
#
# NOTE ON DEPLOYMENT
# CREATE
# aws cloudformation create-stack --stack-name my-SQS --template-body  file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/messageSqsQueue.yaml --capabilities CAPABILITY_NAMED_IAM
#
# DELETE
# aws cloudformation delete-stack --stack-name my-SQS
#
# SIMULATE DATA ENTRY FROM THE CLI (USE URL FROM MADE QUEUE)
#
# aws sqs send-message --queue-url https://sqs.us-east-1.amazonaws.com/654654276756/OrderQueue --message-body '{
#  "orderId": "ORD12345",
#  "customerId": "CUST67890",
#  "amount": 150.75,
#  "currency": "USD",
#  "items": ["Item1", "Item2"]
# }'
# DID NOT WORK GOT NUL FOR OUTPUT
# cloudFormation$ aws dynamodb scan --table-name OrderTable