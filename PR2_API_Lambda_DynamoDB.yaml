# Title: Project 2 - API call to lambda to get one element from DynamoDB
# Date: May 19 to May 23 2025
# API Gateway: Exposes the HTTP Endpoints
# https://<api-id>.execute-api.<region>.amazonaws.com/prod/hello
###########################################

Resources:

# DynamoDB
# Q How to make a dyndb with one record?
# A Define a one element schema and populate it via API put or 
# import data from a source such as S3 file.
  MyDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "One_Element_Table"
      ProvisionedThroughput:
      # Must have this to determine read/writes to db
        ReadCapacityUnits: 3
        WriteCapacityUnits: 1
      KeySchema:
      # Specifies the attributes that make up the primary key for the table. 
      # The attributes in the KeySchema property must also be defined in the AttributeDefinitions property
        -
          AttributeName: "PartId"
          KeyType: "HASH"
      
      AttributeDefinitions:
      # Represents an attribute for describing the schema for the table and indexes
      # What is the "S" mean? S = String, N = Number, and B = Binary
        - 
          AttributeName: "PartId"
          AttributeType: "S"
      
      Tags:
      # Tags use an array for th KeyPair
        - Key: "Name"
          Value: "one_element_db"

  # FOR LAMBDA NEED: POLICY-EXCUTIONROLE-RESOURCE
  
  # Lambda execution role and inline policy
  Lambda_Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: Lambda_Role
      AssumeRolePolicyDocument:
        # this inline policy is to allow lambda to assume access
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        # These are the actions that the role can do
        - PolicyName: LambdaDynamodDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                Resource: !GetAtt MyDynamoDB.Arn 
        


  # Lambda function resource
  Lambda_Function:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.10
      Role: arn:aws:iam::111222333:role/lambda-role
      Handler: index.handler
      Code:
        ZipFile: |
        cdjfdkfjdkfd
        





  
  
  
  
  
  
  
  
  
  
  



  # API Gateway Resources
  #HttpApi:
   # Type: AWS::ApiGatewayV2::Api
    #Properties:
     # Name: Lambda Proxy
      #Description: Lambda proxy using quick create
      #ProtocolType: HTTP
      #Target: arn:aws:apigateway:{region}:lambda:path/2015-03-31/functions/arn:aws:lambda:{region}:{account-id}:function:{function-name}/invocations

  # API Gateway Lambda Integration 

















###########################################
# WORK LOG
# METHOD: ASK - DOCS - FAIL - AI HINT
###########################################

# May 23 Friday

# May 22 Thursday
# Setup Lambda function for get and post to dynamodb

# May 19 Monday
# Built working DynamoDb with one record holder









######################################
# NOTES
######################################

# Failed rollout messgges
# aws cloudformation describe-stack-events --stack-name my-stack

# Stack Delete
# aws cloudformation delete-stack   --stack-name my-stack

# Rollout
#aws cloudformation create-stack   --stack-name my-stack --template-body  file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/PR2_API_Lambda_DynamoDB.yaml