# Title: Simple To-Do List API
# Date: April 8 to April XX 2025
# AI created Labt to learn Lambda, API Gateway, and DynamoDB.
# AI chat link: https://chatgpt.com/c/67f336c5-9df4-800d-a890-280f0a75df66
# Lambda: execute the business logic
# API Gateway: Exposes the HTTP Endpoints
# DynamoDB Stores the to-do items.
# 
###########################################
AWSTemplateFormatVersion: '2010-09-09'
Resources:
 # WORKING - DynamoDB: Primary key is "id" and tablename is "ToDoItems"
 # TEST: Working on 4-8-2025
 # NEXT: Build the scheme for the list
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "ToDoItems"
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 2

 # Lambda Execution role
 # TEST: Working on 4-9-2025
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
                  
 # Lambda Function: one function for "createItem, getItems, and deleteItem"

  ItemLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: item-python-function
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn # use GetAtt which returns ARN, !Ref only the logical name
      Code:
        # This is the pre-created bucket and manual uploaded python code file saved as a .zip
        ZipFile: 


      Runtime: python3.10
      Timeout: 10
      MemorySize: 128


 # APIGW: setup methods "POST /todos, GET /todos, DELETE /todo?id=some-id"

 # IAM Policy to read and write


 #######################################################
 # Validate stack template:
# aws cloudformation validate-template --template-body file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/SimpleToDoListAPI-V2-PreExisitingBucket.yaml
#
# Deploy stack
# NOTE: When using the AWS CLI to create or update a stack that includes IAM resources, you must specify the capability using the --capabilities flag
# aws cloudformation create-stack   --stack-name my-stack --template-body  file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/SimpleToDoListAPI-V2-PreExisitingBucket.yaml --capabilities CAPABILITY_NAMED_IAM  
#
# Delete stack
# aws cloudformation delete-stack   --stack-name my-stack
#
# NOTE: do not put the parameters in the cli command as theses are in the config
# NOTE: try to use a non-hardcodded Instance type
# NOTE: You cannot create EC2 keys as part of the build.
###################################
# WORK LOG
# T 4/16
# Prior to build create a python index.zip file in S3 bucket and reference S3 in Lambda.
#
#
# T 4/10:
# Working are basic Lambda "hello world script" 
# Note: need Create bucket and upload local script prior to stack build
# Uploading code to a lambda function - need to manually pre-stage file in S3 or
# use a CLI generated method as detailed:
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-cli-package.html
#
# W 4/09: 
# Create lambda function


## code for lambda function
#import json
#import uuid
#import boto3
#import os

#dynamodb = boto3.resource('dynamodb')
#table_name = os.environ['TABLE_NAME']
#table = dynamodb.Table(table_name)

#def handler(event, context):
#    try:
#        print("Received event:", json.dumps(event))#
#
#        # If triggered via API Gateway (proxy integration)
#        body = event.get("body")
#        if body:
#            body = json.loads(body)  # parse stringified JSON
#        else:
#            body = event  # fallback for other trigger types

        # Example expects "task": "Buy milk"
#        task = body.get("task")
#        if not task:
#            return {
#                "statusCode": 400,
#                "body": json.dumps({"error": "Missing 'task' field"})
#            }

#        item = {
#            "id": str(uuid.uuid4()),
#            "task": task
#        }

#        table.put_item(Item=item)

#        return {
#            "statusCode": 200,
#            "body": json.dumps({"message": "Task added", "item": item})
#        }

#    except Exception as e:
#        print("Error:", str(e))
#        return {
#            "statusCode": 500,
#            "body": json.dumps({"error": "Internal server error"})
#        }

#When you deploy this Lambda, set an environment variable:
#environment: {
#  TABLE_NAME: 'TodoTable'
#}

# Sample Event Payload (via API Gateway
#{
#  "task": "Finish CDK project"
#}

#r if going through HTTP via API Gateway, the raw event looks like this:
#{
#  "body": "{\"task\": \"Finish CDK project\"}"
#}
