AWSTemplateFormatVersion: "2010-09-09"
# TITLE: webScraper_EC2_S3_RDS_VPC_IAM
#
# WebScraper Applicaiton using EC2, S3, RDS, VPC, IAM, and CLOUDWATCH
# From https://youtu.be/51r3zPOun5g?si=MR2AjWEhBgGIDdSw
#
# Validate stack template:
# aws cloudformation validate-template --template-body file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/webScraper_EC2_S3_RDS_VPC.yaml
#
# Deploy stack
# aws cloudformation create-stack   --stack-name my-stack   --template-body  file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/webScraper_EC2_S3_RDS_VPC.yaml
#
# Delete stack
# aws cloudformation delete-stack   --stack-name my-stack
# NOTE: do not put the parameters in the cli command as theses are in the config
# NOTE: try to use a non-hardcodded Instance type
#######################################################
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
      
Resources:
# VPC for EC2 and Database
 myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
 mySubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.0/24
      # Associate the subnet to an AZ
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
 mySubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.1.0/24
      # Associate the subnet to an AZ
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
 mySubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.0.2.0/24
      # Associate the subnet to an AZ
      AvailabilityZone: !Select [ 2, !GetAZs '' ]

# myInternetGateway for public subnet
 myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production

# AttachGateway to VPC
 AttachGateway:
   Type: AWS::EC2::VPCGatewayAttachment
   Properties:
     VpcId: !Ref myVPC
     InternetGatewayId: !Ref myInternetGateway

# myRouteTable for EC2 to get to the InternetGateway
 myRouteTable:
   Type: AWS::EC2::RouteTable
   Properties:
     VpcId: !Ref myVPC
     Tags:
     - Key: route
       Value: public

# myRoute
 myRoute: 
   Type: AWS::EC2::Route
    #DependsOn: GatewayToInternet
   Properties:
    RouteTableId: !Ref myRouteTable
    DestinationCidrBlock: 0.0.0.0/0
    # Link the interente gateway with the route
    GatewayId: 
      Ref: myInternetGateway

# mySubnet Route Table Association for public 
 mySubnetRouteTableAssociation:
   Type: AWS::EC2::SubnetRouteTableAssociation
   Properties: 
     SubnetId: !Ref  mySubnetPublic
     RouteTableId: !Ref myRouteTable

# REMOVED DATBASES UNTIL IAM WORKING FOR EC2 INSTANCES AND S3
# Subnet for the RDS instances in two AZ
# myDBSubnetGroup:
#   Type: AWS::RDS::DBSubnetGroup
#   Properties:
#     # Manditory to have a description
#     DBSubnetGroupDescription: "myDBSubnetGroupDescription"
#     # Need minimum of 2 subnets for the primary and secondary
#     SubnetIds:
#     - !Ref mySubnetPrivate1
#     - !Ref mySubnetPrivate2 

# RDS for scraper metadata in two-AZ
# MyRDS:
#    Type: AWS::RDS::DBInstance
#    Properties:
#      DBInstanceClass: db.t3.micro
#      Engine: mysql
#      MasterUsername: admin
#      MasterUserPassword: Password123
#      AllocatedStorage: 20
#      PubliclyAccessible: true
#      # Associate the RDS instance with the AZs and subnets
#      DBSubnetGroupName: !Ref myDBSubnetGroup

# Web scraper server
 MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      #ImageId: ami-0c104f6f4a5d9d1d5
      ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
      # Associate EC2 with the public subnet 10.0.0.0/24
      SubnetId: !Ref mySubnetPublic

# Bucket for images
 MyS3Bucket:
    Type: AWS::S3::Bucket

Outputs:
# EC2 Instance IP
  InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt MyEC2Instance.PrivateIp


# S3 Bucket name
  BucketName:
    Description: Name of S3 bucket
    Value: !Ref MyS3Bucket

# REMOVED UNTIL IAM WOKING WITH EC2 AND S3 
# RDS name
#  InstanceId:
#    Description: InstanceID of newly created RDS Instance
#    Value: !Ref MyRDS













