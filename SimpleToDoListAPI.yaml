# Title: Simple To-Do List API
# Date: April 8 to April XX 2025
# AI created Labt to learn Lambda, API Gateway, and DynamoDB.
# AI chat link: https://chatgpt.com/c/67f336c5-9df4-800d-a890-280f0a75df66
# Lambda: execute the business logic
# API Gateway: Exposes the HTTP Endpoints
# DynamoDB Stores the to-do items.
# 
###########################################
AWSTemplateFormatVersion: '2010-09-09'
Resources:

# S3 bucket for lambda code
# To auto make bucket name by system leave name out.
# Reference name later with Ref! <logic name of bucket resource>
#  S3Bucket:
#    Type: 'AWS::S3::Bucket' 
#    DeletionPolicy: Delete
    
 # WORKING - DynamoDB: Primary key is "id" and tablename is "ToDoItems"
 # TEST: yes it build in cloud formation 4-8-2025
 # DDBTable:
 #   Type: AWS::DynamoDB::Table
 #   Properties:
 #     TableName: "ToDoItems"
 #     AttributeDefinitions:
 #       -
 #         AttributeName: "id"
 #         AttributeType: "S"
 #     KeySchema: 
 #       -
 #         AttributeName: "id"
 #         KeyType: "HASH"
 #     ProvisionedThroughput:
 #       ReadCapacityUnits: 5
 #       WriteCapacityUnits: 2

 # Lambda Execution role
 
 # FAILED - Lambda Function: one function for "createItem, getItems, and deleteItem"
  ItemLambdaFunction:
  Type: AWS::Lambda::Function
  Properties:
    FunctionName: item-python-function
    Handler: index.handler
    Role: arn:aws:iam::533267198585:role/cfst-1449-56d6b82b5af86e591f4074e8065b41-LambdaRole-evjCXW5F1xMO
    Code:
      S3Bucket: ks3://kflddfdfdaadfd93459348578934
      S3Key: index.zip
    Runtime: python3.10
    Timeout: 10
    MemorySize: 128

 # APIGW: setup methods "POST /todos, GET /todos, DELETE /todo?id=some-id"
   # POST /items -> CreateItemFunction  
   #GET /items -> GetItemsFunction  
   #DELETE /items/{id} -> DeleteItemFunction
 
 # IAM Policy to read and write


 #######################################################
 # Validate stack template:
# aws cloudformation validate-template --template-body file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/SimpleToDoListAPI.yaml
#
# Deploy stack
# NOTE: When using the AWS CLI to create or update a stack that includes IAM resources, you must specify the capability using the --capabilities flag
# aws cloudformation create-stack   --stack-name my-stack --template-body  file:///mnt/c/Users/Joasia/Documents/MikeStuff/CloudFormationProjects/cloudFormation/SimpleToDoListAPI.yaml --capabilities CAPABILITY_NAMED_IAM  
#
# Delete stack
# aws cloudformation delete-stack   --stack-name my-stack
#
# NOTE: do not put the parameters in the cli command as theses are in the config
# NOTE: try to use a non-hardcodded Instance type
# NOTE: You cannot create EC2 keys as part of the build.
###################################
#
# WORK LOG
#
# F 4/11:
# 

# T 4/10: 
# Create bucket and upload local script
# To create a unique bucket name do not put any name in the bucket resource
# this forces CFM to make a bucket name. Have the labmda refrenece the unique name
# by way of !Ref my_bucket which is the logical identifier.
# Uploading code to a lambda function - need to manually pre-stage file in S3 or
# use a CLI generated method as detailed:
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-cli-package.html

# W 4/09: 
# Create lambda function